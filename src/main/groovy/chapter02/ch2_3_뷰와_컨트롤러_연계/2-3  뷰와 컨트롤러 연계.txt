지금까지의 템플릿은 단순한 HTML 코드였다. 하지만 템플릿을 사용한다는 이점은, 다양한 값을 템플릿 안에 심을 수 있다는
점이다. 컨트롤러 측에서 값을 ModelAndView의 인스턴스에 보관하면 그것이 템플릿에 기록돼서 화면에 표시된다.
직접 해보자.
먼저 home.html을 수정한다. 다음과 같이 <body> 부분을 변경하면 된다.

    home.html

이렇게 하면 <p> 태그 부분에 msg 라는 변수의 값이 표시된다. 여기서 중요한 것은 <p> 태그에 추가한 속성이다.

    th:text 속성

여기선 th:text 라는 속성을 추가하고 있다. 이것은 타임리프의 속성이다. 타임리프에 의해 페이지가 렌더링될 때
'th:oo' 이라는 속성값이 태그의 값으로 치환되는 것이다. 독자적인 속성이므로 해당 값이 렌더링되지 않는 때에도
화면 출력에 영향을 주지 않는다.
예를 들어 home.html이 어떤 이유에서 직접 출력된 경우에는 <p> 태그에 있는 this is sample 텍스트가 그대로 표시될 뿐이다.
타임리프용으로 기술한 정보가 출력에 나쁜 영향을 끼치지 않는 것이다.

    값 심기

이 th:text에는 ${msg} 라는 값이 있다. 이것은 미리 설정된 msg 라는 값을 해당 위치에 심으라는 얘기다.
타임리프에선 다음과 같이 기술하므로,


    ${ 값의 이름 }


컨트롤러 측에서 준비한 값을 여기에 출력할 수 있다.
주의해야 할 것은 심을 값은 타임리프의 속성값으로 설정해야 한다는 점이다. 예를 들어, <p> 태그를,


    <p>${msg}</p>


와 같이 작성해도 된다고 생각할 수 있지만 그렇지 않다. 이와 같이 작성하면 ${msg} 라는 문자가 그대로 표시된다.
${msg} 가 타임리프의 값으로 인식되지 않아서 컨트롤러가 제공하는 값으로 변환되지 않는다. 반드시 th:oo 이라는
속성값으로 설정하자.

        컨트롤러 수정하기

다음은 컨트롤러를 수정해보자. home 메소드 부분을 다음과 같이 수정하면 된다.

    App.groovy

스프링을 실행하면 Hello! this is sample page 라는 텍스트가 표시될 것이다. 이것은 템플릿에서 설정한 값이 아닌
컨트롤러 측에서 준비한 텍스트가 표시되는 것이다.

    addObject

여기서는 addObject 라는 메소드를 이용해서 값을 전달하고 있다. 지정한 이름으로 값이 저장되는 것이다.
예제에선 msg 라는 이름을 지정해서 보관하고 있다. 이 값이 템플릿에서 설정한 ${msg}로 변환돼서 페이지에 표시된다.

        한글이 깨질 시

addObject 를 이용해서 값을 추가하는 방법에는 약간의 문제가 있다. 바로 '한글이 깨진다' 는 점이다.
시험 삼아 addObject 에 한글을 추가해보자.


    mav.addObject("msg", "안녕하세요.")


다시 접속해보면 해석 불가능한 글자들이 출력된다.
이런 현상을 해결하려면 스프링 부트 설정등을 변경해주어야 한다. 하지만 이것은 그루비 스크립트 파일 하나만으로
간단하게 웹 애플리케이션을 만들 수 있다는 스프링 부트 CLI의 장점을 파쇄시킨다.
본격적인 한글 이용은 자바 기반에 대해 제대로 공부한 후에 하기로 하고 여기선 임시방편으로 소개한다.

    native2ascii로 변환하기

글자 깨임 현상은 스프링 내부에서 한글 텍스트를 제대로 처리하지 못하는 부분이 있기 때문에 발생한다.
반대로 말하면 한글을 사용하지 않고 모두 영어나 숫자로만 작성하면 이런 문제는 발생하지 않는다.
'한글 사용은 어쩔 수 없이 피해야 한다' 고 생각한다면 자바에는 2바이트 문자를 일반 영어, 숫자로 변환해주는
툴이 존재한다. 바로 'native2ascii' 다.
native2ascii는 JDK에 포함돼 있는 명령줄 프로그램이다. JDK의 bin 폴더가 환경 변수 path에 설정돼 있으면 명령어를
입력하면 바로 실행될 것이다. 마찬가지로 명령 프롬프트나 터미널에서 native2ascii 명령을 실행하면 된다.
실행 형식은 다음과 같다.


    native2ascii -encoding 인코드 변환할파일 변환후파일


    app.groovy

실제로 변환해보자. 이미 spring run 을 실행하기 위해서 명령 프롬프트(또는 터미널) 툴을 실행했다면 현재 디렉토리로
다음과 같이 실행해보자.


    native2ascii -encoding utf-8 app.groovy app2.groovy


이것으로 app2.groovy 라는 파일이 생성된다. 이 파일을 열면 addObject 부분이 다음과 같이 변경된 것을 알 수 있다.


    mav.addObject("msg", "\uc548 ...")


이것이 유니코드의 이스케이프로 변환된 한글 텍스트다. 파일이 생성된 것을 확인했다면 spring을 실행해서 확인해보자.

        폼 전송

컨트롤러 측 값을 템플릿에 표시하는 방법을 알아보았다. 이번에는 사용자가 입력한 값을 컨트롤러에서 받아서 가공한 후
다시 표시하는 일련의 처리를 만들어보자. 간단히는 폼 전송이라고 하는 처리다.
폼 전송은 템플릿 측에 폼을 배치하고 컨트롤러에서 그것을 받은 후의 처리를 준비해야 한다.
먼저 폼을 배치해보자. home.html의 <body> 부분을 다음과 같이 변경한다.

    home2.html

여기선 <p> 태그에 th:text 를 지정해서 ${msg}를 표시하고, <form> 태그를 사용해서 /send 로 폼을 POST 전송하고 있다.
폼에는 <input type="text"> 태그와 전송 버튼을 배치하고 있다. <input type="text"> 태그에는 th:value라는 속성이 설정돼
있다. 이 태그의 value 속성값(<input value="oo"> 에서 oo 부분)이 th:value의 값으로 변경된다.
기본적인 동작은 th:text 와 같다고 생각하면 된다.

        컨트롤러 수정하기

다음은 컨트롤러 측을 수정해보자. 여기서는 새로운 메소드를 추가한다.

    App2.groovy

    @RequestMapping의 method 지정

여기선 App 클래스 안에 home, send 라는 두 개의 메소드를 사용하고 있다. home은 기존대로 서버의 루트(/)에 접속할 때
호출되는 메소드이며, send는 폼을 전송할 때 호출되는 메소드다.
둘 다 @RequestMapping으로 리퀘스트 주소를 지정하고 있지만 작성법이 약간 다르다. 지금까지는
인수에 ("/") 와 같이 할당할 주소를 지정했지만 App2.groovy에선


    @RequestMapping(value=주소, method=메소드)


와 같은 형식으로 작성하고 있다. 사실은 이 작성법이 어노테이션 인수의 바른 작성 방법이다. 단, value만 값을 가지는 경우는
모두 생략하고 value의 값만 작성해도 된다. 지금까지 ("/")로 작성한 것도 사실은 (value="/")을 간략하게 기술한 것이다.
여기서 추가한 인수 'method'는 리퀘스트 메소드(GET이나 POST)를 지정한다. RequestMathod 클래스의 GET 또는 POST 값을
지정한다. 예를 들어 method = requestMaethod.POST 라고 지정하면 POST로 접속한 경우에만 메소드가 호출된다.

    @RequestParam 어노테이션

위 groovy에서 새롭게 추가된 것은 send 메소드다. 이것도 리퀘스트 매핑에 의해 접속 시에 호출되지만 인수가 home과 다르다.


    def send(@RequestParam("text1") String str, ModelAndView mav) { ...


이와 같이 ModelAndView 앞에 @RequestParam("text1") String str 이라는 인수를 지정하고 있다.
이것은 다음과 같이 나누어 생각하면 이해하기 쉽다.


    @RequestParam("text1") - 인수 앞에 붙인 어노테이션
    String str - 실제 인수


즉, String str 라는 인수 앞에 @RequestParam 어노테이션이 붙어 있다.
이 어노테이션은 리퀘스트에 전달된 매개변수 값을 나타내기 위한 것이다. 매개변수란 쉽게 말하자면 폼이 전송한 값이다.
즉, @RequestParam("text1")은 text1이라는 이름으로 전송된 폼의 값으 의미하는 것이다.
이 어노테이션을 지정하므로 폼이 전송한 값을 인수로 설정할 수 있게 된다. home2.html 에선,
<input type="text" name="text1" /> 의 입력 필드에 있는 값이 @RequestParam("text1") 에 의해 String str 인수에 전달되는
것이다. 폼이 전송한 갓ㅂ은 이와 같이 @RequestParam 어노테이션을 설정한 인수에 자동 전달된다.
값이 전달되면 이것을 추출해서 처리만 하면 된다. 특수한 객체를 사용해서 파라미터 값을 추출할 필요가 없다.

        그루비에서 자바로

간략하게나마 그루비를 사용한 개발 방법을 설명했는데, 간단한 애플리케이션을 만드는 경우나 프로토타입을 만드는 정도라면
매우 편리하게 사용할 수 있다. 하지만 본격적인 개발에 들어가려면 자바를 사용한 개발방식을 배우는 것이 좋다.
스프링 부트의 공시 사이트에서도 모든 설명을 자바를 기반으로 하고 있으며 그루비는 옵션으로 취급하고 있다.
인터넷에서 검색해봐도 대부분의 정보가 자바 기반인 것을 알 수 있다. 무엇보다 스프링 프레임워크 자체가 자바로 만든 것이고
자바 개발을 위한 프레임워크이기 때문이다.