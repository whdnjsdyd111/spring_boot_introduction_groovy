        템플릿 사용하기

지금까지는 표시할 내용을 텍스트로 준비해서 출력했지만 실제 웹 페이지에선 이런 방법을 사용할 수 없다.
HTML 파일 등을 미리 준비해두고 그것을 필요에 따라 읽어서 표시할 수 있는 구조가 필요하다.
이런 경우에 사용하는 것이 템플릿이라고 하는 기능이다.

템플릿은 HTML을 기반으로 작성된 코드를 읽어 렌더링해서 웹 페이지에 출력하는 기능이다. 단순히 HTML 코드를 읽어서
표시하는 것이 다가 아니라 필요에 따라 다양한 정보를 HTML 안에 심어서 표시하는 역할을 한다.
이를 통해 프로그램 내에서 화면 표시 내용을 조작할 수 있다.

    타임리프 템플릿 라이브러리

자바 웹 프로그래밍은 JSP가 웹 페이지용으로 사용되는데, HTML과 같은 태그를 사용해서 자바 코드를 심기 때문에
HTML의 비주얼 편집기 등에선 사용하기가 어렵다.
타임리프는 태그 안에 th:oo 이라는 특수한 속성을 사용하며 ${} 같은 기호를 사용해서 값을 심을 수 있어서
HTML 태그 구조에 영향을 주지 않고 내용을 기술할 수 있다. HTML의 비주얼 편집기 등을 사용해도 출력 내용이 안망가진다.

        타임 리프 사용

실제로 타임리프를 사용해서 HTML 템플릿을 표시해보자. 템플릿을 작성해서 컨트롤러의 코드를 바꾸기만 하면 된다.

    템플릿 작성

먼저 템플릿을 작성해보자. 편집기를 실행해서 다음과 같이 작성하자.

    home.html

    templates 폴더에 저장

작성한 템플릿을 저장하자. 앞서 작성한 app.groovy 파일이 있는 곳에 templates 폴더를 생성한다.
그리고 이 폴더 안에 home.html 템플릿 파일을 home.html로 저장한다.
템플릿은 이처러 컨트롤러가 있는 곳의 templates 폴더 안에 두어야 한다.
다른 곳에 두면 템플릿이 제대로 동작하지 않는다.

        컨트롤러 수정하기

그러면 템플릿을 읽어서 표시하도록 컨트롤러를 수정해보자. app.groovy의 내용을 다음과 같이 변경한다.

    App.groovy

        컨트롤러와 타임리프

    @Grab("thymeleaf-spring4")

먼저 @Grab 어노테이션이다. 이것은 그루비의 라이브러리 등을 사용할 수 있게 설정하는 것이다.
thymeleaf-spring4 라는 모듈(외부에서 불러와서 사용하는 프로그램)은 스프링에서 타임리프를 사용할 수 있게 하는 모듈이다.
이를 통해 Thymeleaf-spring4 라는 라이브러리에 있는 클래스들을 사용할 수 있다.

    @Controller

클래스 정의 전에 기술하는 어노테이션도 바뀌었다. @RestController 대신에 @Controller 라는 어노테이션이 사용되고 있다.
이것은 스프링 부트의 일반적인 컨트롤러로 클래스를 사용할 수 있게 하는 것이다.
@RestController 는 'REST 컨트롤러' 라는 특수한 컨트롤러로 클라이언트에 텍스트를 출력하는 것이었다.

@Controller 는 좀 더 일반적인 사용을 위한 컨트롤러다. 쉽게 설명하자면 템플릿을 이용해서 HTML 페이지를 렌더링하고
표시하는 페이지에 사용된다. 템플릿을 이용해서 HTML 페이지를 표시하는 경우는 @RestController 가 아닌
@Controller 를 사용한다고 기억하면 된다.

    @ResponseBody

메소드에는 @RequestMapping 외에 @ResponseBody 라는 어노테이션이 추가됐다. 이것은 리스폰스를 객체로 설정할 수 있게
해준다. 앞에선 home로 텍스트를 출력했지만 이 @ResponseBody 를 지정하면 객체를 반환해서 이 객체를 가지고 페이지 내용을
생성하는 것이다. 그렇다고 해서 모든 객체를 반환해도 좋은 것은 아니다. 스프링 부트가 제공하는 객체를 사용한다.

    home 메소드와 ModelAndView

def home(ModelAndView mav) {
}

이 ModelAndView 라는 것이 리스폰스로 변환하는 클래스다. 이름 그대로 모델과 뷰 정보를 모아서 관리하는 클래스다.
모델과 뷰는 MVC의 Model과 View로 데이터를 관리하는 모델과 화면 출력과 관련된 뷰를 한 번에 처리하는 것이다.
@ResponseBody 로 리스폰스로 이용할 수 있는 것에 ModelAndView 만 있는 것은 아니지만, 이것이
가장 기본이 되는 리스폰스용 클래스라고 볼 수 있다.

    뷰 이름 설정하기

그러면 home 메소드에선 어떤 처리를 하는 것일까? 잘 보면 아주 간단한 처리라는 것을 알 수 있다.

    mav.setViewName("home")
    mav

setViewName 메소드를 실행하고 있다. 뷰 이름을 설정하기 위한 메소드다. 이를 통해서 인수로 지정한 이름의 템플릿을
templates 폴더에서 불러올 수 있다.
여기선 "home" 을 사용하므로 templates 폴더의 home.html 파일을 템플릿으로 읽어오는 것이다(확장자는 지정할 필요가 없다.
"home" 이라고 하면 자동으로 home.html 파일을 읽는다.).
다음은 ModelAndView 인스턴스를 그대로 home 메소드의 반환값으로 반환하면 페이지 렌더링에 필요한 정보를 꺼내서
페이지를 생성해주는 것이다.

        그루비에서도 템플릿을 작성할 수 있다.

스프링 부트에서 이용할 수 있는 템플릿에 타임리프만 있는 것은 아니다. 사실 그루비로 웹 페이지의 템플릿을 작성할 수 있다.
먼저 편집기를 이용해서 다음 코드를 작성하자.

    home.tpl

이것이 그루비를 이용한 템플릿이다. HTML 태그 같은 것은 전혀 사용하고 있지 않다. 이 코드 내용에 대해선 뒤에 설명한다.
다음은 컨트롤러를 변경해야 한다. 변경이라고 하지만 사실 큰 변화는 없다 타임리프를 사용하지 않으므로 앞의
@Grab 문만 삭제하면 된다.

    App2.groovy

준비가 되었다면 spring rung을 재실행해서 브라우저로 접속해보자. Hello 제목 아래 this is Groovy template! 표시된다.

        그루비를 이용한 HTML 작성하기

작성한 home.tpl 내용을 다시 보자. 그루비를 이용하는 템플릿은 그루비 코드로 HTML 구조를 기술한다.
코드의 기본적인 형태는 다음과 같다.


    html {
        head {
            헤더 내용
        }
        body {
            바디 내용
        }
    }


html 틀 안에 head와 body라는 항목을 기술하고 있다. 각각 <html>, <head>, <body>에 해당한다.
보면 알겠지만 태그 이름을 그대로 메소드를 사용하고 있다. 그리고 시작 태그와 종료 태그 사이에 표시할 텍스트를
그대로 인수로 지정하고 있다. 예를 들면 다음과 같다.


    title("index page")
    ↓
    <title>index page</title>


이런식으로 출력한 태그 이름을 메소드로 작성하므로 HTML 태그를 생성할 수 있다.
이 방법을 사용하면 생성된 HTML 코드는 반드시 HTML 규칙에 맞게 작성된다. 종료 태그를 잊거나 잘못된 위치에 태그를 기술하는
등의 문제가 발생하지 않는다. 단, HTML 태그를 전혀 사용하지 않으므로 편집기 등에서는 사용할 수 없다.
모든 것을 코드로 작성하기 때문에 이런 코딩에 익숙하지 않은 프로그래머에겐 사용하기 어려운 템플릿이고
디자이너에게는 이해하기 힘든 템플릿이 될 수 있다.

        <div> 태그와 <a> 태그

<title>이나 <h1> 같은 간단한 태그는 쉽게 사용할 수 있지만 HTML에는 이외에도 수많은 태그가 존재한다.
예를 들어 <div> 태그는 그 안에 다시 별도의 태그를 작성하는 것이 일반적이다.
이런 내포 관계의 태그는 어떻게 작성할 수 있을까? 또한, <a> 태그 등은 href 속성으로 링크 위치를 기술하지만 이런 태그의
속성은 어떻게 작성해야 할까?
실제 예제를 보면서 설명하는 것이 쉽다. 다음과 같이 작성해보자.

    home1.tpl

이것은 바디 부분에 <div> 태그와 <a> 태그를 추가한 예제이다.
표시된 웹 페이지의 코드의 코드를 보면 다음과 같은 형태로 바디 부분이 기술돼 있는 것을 알 수 있다.

    태그의 내포 관계

<div> 태그 안에 <a> 태그가 포함된 것을 알 수 있다. 이 부분이 템플릿에서 어떤 형태로 돼 있는지 보자.


    div() {
        내부 태그
    }


이처럼 div 메소드 뒤에 {}를 붙이고 그 안에 포함하고 싶은 태그를 기술하고 있다. 이런 식으로 쉽게 내포 관계를
만들 수 있다.

    태그 속성

또한, <a> 태그를 기술하고 있는 a 메소드 부분을 보면 href 등의 속성이 인수로 작성돼 있다.
정리하면 다음과 같은 형태다.


    메소드(속성명: 값, 속성명: 값, ...) {
        yield '표시할 텍스트'
    }


태그 속성은 속성 이름과 같을 'oo:xx' 형태로 기술한다. 하지만 이 형식에선 지금까지 인수로 작성했던 텍스트 내용을
작성할 수 없게 된다. 이것은 뒤에 오는 '{}' 안에 yield 'oo' 이라는 형태로 기술하면 된다.

    메소드 작성법 정리

인수로 지정하는 방법과 {} 안에 yield 로 작성하는 방법 두 가지가 있어서 혼란스러울 수 있다.
이것을 인수는 모두 속성 지정에 사용하고 표시할 텍스트는 yield 를 사용한다라고 구분하면 좀 더 이해하기 쉬울 것이다.


    메소드(속성 관련 부분) {
        시작 태그와 종료 태그 사이에 있는 것
    }


() 안에는 태그 속성에 관한 것을 기술하고 그 뒤의 {} 안에는 시작 태그와 종료 태그 사이에 있는 내용을 기술한다.
이 원칙을 기억하고 있으면 혼동을 줄일 수 있다.

        어떤 템플릿을 사용해야 하는가?

타임리프와 그루비를 이용한 템플릿 작성법에 관해 간단히 살펴봤다. 이외에도 템플릿이 있지만 생략한다.
이 책에선 기본적으로 타임리프를 사용한다. 몇 가지 이유가 있지만 HTML 태그를 약간의 수정만으로 그대로 사용할 수
있다는 것이 가장 큰 이유이다. 새로운 프레임워크를 배울 때는 공부해야 할 방대한 정보를 접하게 된다.
따라서 가능하다면 새로 배워야 할 것을 최대한 줄이는 것이 좋다. 그루비를 사용하게 되면 그루비 사용법을 제대로 이해해야
한다. 이것은 학습자에게 부담이다.
타임리프의 경우 'th:oo 이라는 속성을 기술' 한다는 것만 알고 있으면 일단은 사용할 수 있다.
또한, HTML로 작성한 것을 복사해서 약간의 수정만 하면 된다. 이렇게 새로운 것을 배우지 않고도 바로 사용할 수 있다는
점에서 타임리프를 이용하겠다.
그렇다고 '그루비는 안돼' 하고 반대하는 것은 아니다. 앞서 기본적인 사용법을 이해했다면
별도로 학습하는 것도 도움될 것이다.